stages:
  - build
  - test
  - publish

variables:
  NODE_IMAGE: "node:22-alpine" # Use Node.js 22 for build and test
  DOCKER_IMAGE: "docker:28" # Docker image for publishing
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/wenex/platform" # GitLab Container Registry path

before_script:
  - echo "Starting GitLab CI/CD pipeline..."

build:
  stage: build
  image: $NODE_IMAGE
  before_script:
    - apk add git curl bash
    - echo "Starting build..."
  script:
    - npm run git:clone
    - npm install -g pnpm@10.5.2
    - pnpm install --frozen-lockfile
    - npm run script:build

test:
  stage: test
  image: $NODE_IMAGE
  before_script:
    - apk add git curl bash
    - echo "Starting tests..."
  script:
    - npm run git:clone
    - npm install -g pnpm@10.5.2
    - pnpm install --frozen-lockfile
    - npm run test

publish:
  stage: publish
  image: $DOCKER_IMAGE
  services:
    - name: docker:28-dind
      alias: docker # Docker-in-Docker required for image building
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "" # Disable TLS
  before_script:
    - echo -e "DOCKER_HOST is set to $DOCKER_HOST"
    - ping -c 1 docker || echo "Cannot ping docker service"
    - docker --host "$DOCKER_HOST" info || echo "Failed to connect to Docker daemon"
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_REF_SLUG .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_SLUG
    - |
      if echo "$CI_COMMIT_TAG" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
        docker tag "$IMAGE_NAME:$CI_COMMIT_REF_SLUG" "$IMAGE_NAME:latest"
        docker push "$IMAGE_NAME:latest"
      fi
  # rules:
  #   - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
  #     when: on_success
  #   - when: never # Prevent running on non-tagged commits
